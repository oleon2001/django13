#!/usr/bin/env python3
"""
üöÄ SKYGUARD BACKEND MASTER STARTER
Script maestro para iniciar todo el backend del sistema SkyGuard
Incluye: Django, Celery, GPS Servers, WebSockets, Monitoring
"""

import os
import sys
import subprocess
import time
import threading
import signal
import platform
import psutil
import json
from datetime import datetime
from pathlib import Path
import logging
from typing import Dict, List, Optional, Tuple

class Colors:
    """C√≥digos de colores para terminal."""
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

class SkyGuardBackendManager:
    """Gestor completo del backend SkyGuard."""
    
    def __init__(self):
        """Inicializar el gestor del backend."""
        self.processes = {}
        self.running = False
        self.project_root = Path(__file__).parent.absolute()
        self.log_dir = self.project_root / "logs"
        self.pid_file = self.project_root / "skyguard_backend.pid"
        
        # Crear directorio de logs
        self.log_dir.mkdir(exist_ok=True)
        
        # Configurar logging
        self.setup_logging()
        
        # Configuraci√≥n de servicios
        self.services_config = {
            'redis': {
                'name': 'Redis Server',
                'command': ['redis-server'],
                'port': 6379,
                'check_cmd': ['redis-cli', 'ping'],
                'required': True,
                'startup_delay': 2,
                'log_file': 'redis.log'
            },
            'postgresql': {
                'name': 'PostgreSQL',
                'command': ['sudo', 'systemctl', 'start', 'postgresql'],
                'port': 5432,
                'check_cmd': ['sudo', 'systemctl', 'is-active', 'postgresql'],
                'required': True,
                'startup_delay': 3,
                'log_file': 'postgresql.log'
            },
            'django': {
                'name': 'Django HTTP Server',
                'command': [sys.executable, 'manage.py', 'runserver', '0.0.0.0:8000'],
                'port': 8000,
                'required': True,
                'startup_delay': 5,
                'log_file': 'django.log',
                'env_vars': {'DJANGO_SETTINGS_MODULE': 'skyguard.settings.dev'}
            },
            'daphne': {
                'name': 'Django WebSocket Server (Daphne)',
                'command': [sys.executable, '-m', 'daphne', '-b', '0.0.0.0', '-p', '8001', 'skyguard.asgi:application'],
                'port': 8001,
                'required': True,
                'startup_delay': 3,
                'log_file': 'daphne.log',
                'env_vars': {'DJANGO_SETTINGS_MODULE': 'skyguard.settings.dev'}
            },
            'celery_worker': {
                'name': 'Celery Worker',
                'command': [sys.executable, '-m', 'celery', '-A', 'skyguard', 'worker', '-l', 'info', '--concurrency=12'],
                'required': True,
                'startup_delay': 5,
                'log_file': 'celery_worker.log',
                'env_vars': {'DJANGO_SETTINGS_MODULE': 'skyguard.settings.dev'}
            },
            'celery_beat': {
                'name': 'Celery Beat Scheduler',
                'command': [sys.executable, '-m', 'celery', '-A', 'skyguard', 'beat', '-l', 'info'],
                'required': True,
                'startup_delay': 3,
                'log_file': 'celery_beat.log',
                'env_vars': {'DJANGO_SETTINGS_MODULE': 'skyguard.settings.dev'}
            },
            'gps_servers': {
                'name': 'GPS Protocol Servers',
                'command': [sys.executable, 'manage.py', 'runserver_gps'],
                'required': True,
                'startup_delay': 4,
                'log_file': 'gps_servers.log',
                'env_vars': {'DJANGO_SETTINGS_MODULE': 'skyguard.settings.dev'}
            },
            'device_monitor': {
                'name': 'Device Monitor',
                'command': [sys.executable, 'manage.py', 'start_device_monitor', '--timeout', '2', '--interval', '60'],
                'required': False,
                'startup_delay': 2,
                'log_file': 'device_monitor.log',
                'env_vars': {'DJANGO_SETTINGS_MODULE': 'skyguard.settings.dev'}
            }
        }
        
    def setup_logging(self):
        """Configurar sistema de logging."""
        log_format = '%(asctime)s - %(levelname)s - %(message)s'
        logging.basicConfig(
            level=logging.INFO,
            format=log_format,
            handlers=[
                logging.FileHandler(self.log_dir / 'backend_manager.log'),
                logging.StreamHandler(sys.stdout)
            ]
        )
        self.logger = logging.getLogger(__name__)
        
    def print_banner(self):
        """Mostrar banner del sistema."""
        banner = f"""
{Colors.HEADER}{'='*80}
üöÄ SKYGUARD BACKEND SYSTEM MANAGER
üåç Sistema completo de rastreo GPS y an√°lisis en tiempo real
{'='*80}{Colors.ENDC}

{Colors.OKBLUE}üìä Servicios a iniciar:{Colors.ENDC}
  1. Redis Server (Cache & Message Broker)
  2. PostgreSQL Database 
  3. Django HTTP Server (API REST)
  4. Daphne WebSocket Server (Real-time)
  5. Celery Worker (Background Tasks)
  6. Celery Beat (Scheduled Tasks)
  7. GPS Protocol Servers (Wialon, Concox, etc.)
  8. Device Monitor (Optional)

{Colors.WARNING}üí° Presiona Ctrl+C para detener todos los servicios{Colors.ENDC}
"""
        print(banner)
        
    def log(self, message: str, level: str = "INFO", color: str = None):
        """Registrar mensaje con timestamp y color."""
        timestamp = datetime.now().strftime("%H:%M:%S")
        colored_message = f"{color}{message}{Colors.ENDC}" if color else message
        print(f"[{timestamp}] {level}: {colored_message}")
        
        # Tambi√©n log a archivo
        if level == "ERROR":
            self.logger.error(message)
        elif level == "WARNING":
            self.logger.warning(message)
        else:
            self.logger.info(message)
    
    def check_prerequisites(self) -> bool:
        """Verificar prerequisitos del sistema."""
        self.log("üîç Verificando prerequisitos del sistema...", color=Colors.OKCYAN)
        
        # Verificar Python version
        if sys.version_info < (3, 7):
            self.log("‚ùå Python 3.7+ requerido", "ERROR", Colors.FAIL)
            return False
        
        # Verificar archivos principales
        required_files = [
            "manage.py",
            "requirements.txt",
            "skyguard/settings/dev.py",
            "skyguard/asgi.py",
            "skyguard/celery.py"
        ]
        
        for file in required_files:
            if not (self.project_root / file).exists():
                self.log(f"‚ùå Archivo requerido no encontrado: {file}", "ERROR", Colors.FAIL)
                return False
        
        # Verificar que Django est√© instalado
        try:
            import django
            self.log(f"‚úÖ Django {django.get_version()} encontrado", color=Colors.OKGREEN)
        except ImportError:
            self.log("‚ùå Django no est√° instalado", "ERROR", Colors.FAIL)
            return False
            
        # Verificar que Celery est√© instalado
        try:
            import celery
            self.log(f"‚úÖ Celery {celery.__version__} encontrado", color=Colors.OKGREEN)
        except ImportError:
            self.log("‚ùå Celery no est√° instalado", "ERROR", Colors.FAIL)
            return False
            
        # Verificar que Daphne est√© instalado
        try:
            import daphne
            self.log("‚úÖ Daphne encontrado", color=Colors.OKGREEN)
        except ImportError:
            self.log("‚ùå Daphne no est√° instalado", "ERROR", Colors.FAIL)
            return False
        
        self.log("‚úÖ Todos los prerequisitos verificados", color=Colors.OKGREEN)
        return True
    
    def check_port_available(self, port: int) -> bool:
        """Verificar si un puerto est√° disponible."""
        try:
            import socket
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                return s.connect_ex(('localhost', port)) != 0
        except:
            return True
    
    def check_service_health(self, service_name: str) -> bool:
        """Verificar salud de un servicio."""
        config = self.services_config.get(service_name, {})
        check_cmd = config.get('check_cmd')
        port = config.get('port')
        
        if check_cmd:
            try:
                result = subprocess.run(check_cmd, capture_output=True, timeout=5)
                return result.returncode == 0
            except:
                return False
        elif port:
            return not self.check_port_available(port)
        
        # Si no hay forma de verificar, asumir que est√° corriendo si el proceso existe
        return service_name in self.processes and self.processes[service_name].poll() is None
    
    def start_service(self, service_name: str) -> bool:
        """Iniciar un servicio espec√≠fico."""
        config = self.services_config[service_name]
        
        # Verificar si el servicio ya est√° corriendo antes de intentar iniciarlo
        if self.check_service_health(service_name):
            self.log(f"‚úÖ {config['name']} ya est√° corriendo", color=Colors.OKGREEN)
            return True
        
        try:
            self.log(f"üöÄ Iniciando {config['name']}...", color=Colors.OKCYAN)
            
            # Configurar variables de entorno
            env = os.environ.copy()
            env['PYTHONPATH'] = str(self.project_root)
            
            # Agregar variables espec√≠ficas del servicio
            if 'env_vars' in config:
                env.update(config['env_vars'])
            
            # Configurar archivo de log
            log_file_path = self.log_dir / config.get('log_file', f'{service_name}.log')
            
            # Iniciar proceso
            with open(log_file_path, 'w') as log_file:
                process = subprocess.Popen(
                    config['command'],
                    cwd=self.project_root,
                    env=env,
                    stdout=log_file,
                    stderr=subprocess.STDOUT,
                    universal_newlines=True
                )
            
            self.processes[service_name] = process
            
            # Esperar delay de inicio
            time.sleep(config.get('startup_delay', 2))
            
            # Verificar que el servicio est√© corriendo
            if process.poll() is None:
                # Verificar salud si es posible
                if self.check_service_health(service_name):
                    self.log(f"‚úÖ {config['name']} iniciado correctamente (PID: {process.pid})", color=Colors.OKGREEN)
                    return True
                else:
                    self.log(f"‚ö†Ô∏è {config['name']} iniciado pero verificaci√≥n de salud fall√≥", "WARNING", Colors.WARNING)
                    return True  # Asumir que est√° bien, puede tomar tiempo en estar listo
            else:
                self.log(f"‚ùå {config['name']} fall√≥ al iniciar", "ERROR", Colors.FAIL)
                return False
                
        except Exception as e:
            self.log(f"‚ùå Error iniciando {config['name']}: {e}", "ERROR", Colors.FAIL)
            return False
    
    def stop_service(self, service_name: str) -> bool:
        """Detener un servicio espec√≠fico."""
        if service_name not in self.processes:
            return True
            
        process = self.processes[service_name]
        config = self.services_config[service_name]
        
        try:
            self.log(f"üõë Deteniendo {config['name']}...")
            
            # Intentar terminaci√≥n graceful
            process.terminate()
            
            # Esperar hasta 10 segundos para terminaci√≥n graceful
            try:
                process.wait(timeout=10)
            except subprocess.TimeoutExpired:
                # Forzar terminaci√≥n
                self.log(f"‚ö†Ô∏è Forzando terminaci√≥n de {config['name']}", "WARNING")
                process.kill()
                process.wait()
            
            del self.processes[service_name]
            self.log(f"‚úÖ {config['name']} detenido", color=Colors.OKGREEN)
            return True
            
        except Exception as e:
            self.log(f"‚ùå Error deteniendo {config['name']}: {e}", "ERROR", Colors.FAIL)
            return False
    
    def start_all_services(self) -> bool:
        """Iniciar todos los servicios en orden."""
        self.log("üöÄ Iniciando todos los servicios del backend...", color=Colors.HEADER)
        
        failed_services = []
        
        for service_name, config in self.services_config.items():
            if not self.start_service(service_name):
                if config.get('required', False):
                    failed_services.append(config['name'])
                    self.log(f"‚ùå Servicio requerido {config['name']} fall√≥", "ERROR", Colors.FAIL)
                else:
                    self.log(f"‚ö†Ô∏è Servicio opcional {config['name']} fall√≥", "WARNING", Colors.WARNING)
        
        if failed_services:
            self.log(f"‚ùå Fallos en servicios cr√≠ticos: {', '.join(failed_services)}", "ERROR", Colors.FAIL)
            return False
        
        self.log("üéØ Todos los servicios iniciados correctamente", color=Colors.OKGREEN)
        return True
    
    def stop_all_services(self):
        """Detener todos los servicios."""
        self.log("üõë Deteniendo todos los servicios...", color=Colors.WARNING)
        
        # Detener en orden inverso
        service_names = list(self.services_config.keys())
        service_names.reverse()
        
        for service_name in service_names:
            self.stop_service(service_name)
        
        # Limpiar archivo PID
        if self.pid_file.exists():
            self.pid_file.unlink()
        
        self.log("‚úÖ Todos los servicios detenidos", color=Colors.OKGREEN)
    
    def show_system_status(self):
        """Mostrar estado actual del sistema."""
        self.log("üìä Estado actual del sistema:", color=Colors.HEADER)
        
        print(f"\n{Colors.OKBLUE}{'Servicio':<30} {'Estado':<15} {'PID':<10} {'Puerto':<8}{Colors.ENDC}")
        print("-" * 65)
        
        for service_name, config in self.services_config.items():
            if service_name in self.processes:
                process = self.processes[service_name]
                if process.poll() is None:
                    status = f"{Colors.OKGREEN}‚úÖ Corriendo{Colors.ENDC}"
                    pid = str(process.pid)
                else:
                    status = f"{Colors.FAIL}‚ùå Detenido{Colors.ENDC}"
                    pid = "N/A"
            else:
                status = f"{Colors.WARNING}‚ö†Ô∏è No iniciado{Colors.ENDC}"
                pid = "N/A"
            
            port = str(config.get('port', 'N/A'))
            print(f"{config['name']:<30} {status:<24} {pid:<10} {port:<8}")
        
        # Mostrar URLs importantes
        print(f"\n{Colors.OKCYAN}üåê URLs importantes:{Colors.ENDC}")
        print(f"  ‚Ä¢ API REST:      http://localhost:8000")
        print(f"  ‚Ä¢ WebSocket:     ws://localhost:8001")
        print(f"  ‚Ä¢ Admin:         http://localhost:8000/admin")
        print(f"  ‚Ä¢ API Docs:      http://localhost:8000/api/docs/")
        
        # Mostrar puertos GPS
        print(f"\n{Colors.OKCYAN}üì° Puertos GPS:{Colors.ENDC}")
        print(f"  ‚Ä¢ Wialon:        20332 (TCP)")
        print(f"  ‚Ä¢ Concox:        55300 (TCP)")
        print(f"  ‚Ä¢ Meiligao:      62000 (UDP)")
        print(f"  ‚Ä¢ Satellite:     15557 (TCP)")
        
    def monitor_services(self):
        """Monitorear servicios en ejecuci√≥n."""
        self.log("üëÅÔ∏è Iniciando monitoreo de servicios...", color=Colors.OKCYAN)
        
        check_interval = 30  # segundos
        
        while self.running:
            try:
                time.sleep(check_interval)
                
                failed_services = []
                
                for service_name, config in self.services_config.items():
                    if service_name in self.processes:
                        process = self.processes[service_name]
                        if process.poll() is not None:
                            failed_services.append(config['name'])
                            self.log(f"‚ö†Ô∏è {config['name']} se detuvo inesperadamente", "WARNING", Colors.WARNING)
                            
                            # Intentar reiniciar servicios cr√≠ticos
                            if config.get('required', False):
                                self.log(f"üîÑ Intentando reiniciar {config['name']}...", color=Colors.WARNING)
                                if self.start_service(service_name):
                                    self.log(f"‚úÖ {config['name']} reiniciado exitosamente", color=Colors.OKGREEN)
                                else:
                                    self.log(f"‚ùå No se pudo reiniciar {config['name']}", "ERROR", Colors.FAIL)
                
                # Mostrar estad√≠sticas peri√≥dicas
                active_services = len([p for p in self.processes.values() if p.poll() is None])
                total_services = len(self.services_config)
                
                if failed_services:
                    self.log(f"üìä Servicios activos: {active_services}/{total_services} - Fallos: {', '.join(failed_services)}", 
                           "WARNING", Colors.WARNING)
                else:
                    self.log(f"üìä Servicios activos: {active_services}/{total_services} - Todo funcionando correctamente", 
                           color=Colors.OKGREEN)
                
            except KeyboardInterrupt:
                break
            except Exception as e:
                self.log(f"‚ùå Error en monitoreo: {e}", "ERROR", Colors.FAIL)
    
    def setup_signal_handlers(self):
        """Configurar manejadores de se√±ales."""
        def signal_handler(signum, frame):
            self.log("\nüõë Se√±al de interrupci√≥n recibida, deteniendo servicios...", "WARNING", Colors.WARNING)
            self.running = False
            self.stop_all_services()
            sys.exit(0)
        
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
    
    def save_pid(self):
        """Guardar PID del proceso principal."""
        with open(self.pid_file, 'w') as f:
            f.write(str(os.getpid()))
    
    def run_django_migrations(self) -> bool:
        """Ejecutar migraciones de Django."""
        self.log("üîÑ Ejecutando migraciones de Django...", color=Colors.OKCYAN)
        
        try:
            env = os.environ.copy()
            env['DJANGO_SETTINGS_MODULE'] = 'skyguard.settings.dev'
            
            result = subprocess.run(
                [sys.executable, 'manage.py', 'migrate'],
                cwd=self.project_root,
                env=env,
                capture_output=True,
                text=True
            )
            
            if result.returncode == 0:
                self.log("‚úÖ Migraciones ejecutadas correctamente", color=Colors.OKGREEN)
                return True
            else:
                self.log(f"‚ùå Error en migraciones: {result.stderr}", "ERROR", Colors.FAIL)
                return False
                
        except Exception as e:
            self.log(f"‚ùå Error ejecutando migraciones: {e}", "ERROR", Colors.FAIL)
            return False
    
    def collect_static_files(self) -> bool:
        """Recopilar archivos est√°ticos."""
        self.log("üì¶ Recopilando archivos est√°ticos...", color=Colors.OKCYAN)
        
        try:
            env = os.environ.copy()
            env['DJANGO_SETTINGS_MODULE'] = 'skyguard.settings.dev'
            
            result = subprocess.run(
                [sys.executable, 'manage.py', 'collectstatic', '--noinput'],
                cwd=self.project_root,
                env=env,
                capture_output=True,
                text=True
            )
            
            if result.returncode == 0:
                self.log("‚úÖ Archivos est√°ticos recopilados", color=Colors.OKGREEN)
                return True
            else:
                self.log(f"‚ö†Ô∏è Error en collectstatic: {result.stderr}", "WARNING", Colors.WARNING)
                return True  # No es cr√≠tico
                
        except Exception as e:
            self.log(f"‚ö†Ô∏è Error recopilando est√°ticos: {e}", "WARNING", Colors.WARNING)
            return True  # No es cr√≠tico
    
    def start_complete_backend(self):
        """Iniciar el backend completo."""
        self.print_banner()
        
        # Guardar PID
        self.save_pid()
        
        # Configurar manejadores de se√±ales
        self.setup_signal_handlers()
        
        # Verificar prerequisitos
        if not self.check_prerequisites():
            self.log("‚ùå Prerequisitos no cumplidos", "ERROR", Colors.FAIL)
            return False
        
        # Ejecutar migraciones
        if not self.run_django_migrations():
            self.log("‚ö†Ô∏è Error con migraciones, continuando...", "WARNING", Colors.WARNING)
        
        # Recopilar archivos est√°ticos
        self.collect_static_files()
        
        # Iniciar servicios
        self.running = True
        
        if not self.start_all_services():
            self.log("‚ùå Error iniciando servicios cr√≠ticos", "ERROR", Colors.FAIL)
            self.stop_all_services()
            return False
        
        # Mostrar estado
        self.show_system_status()
        
        self.log("üéØ Backend SkyGuard iniciado completamente", color=Colors.OKGREEN)
        self.log("üîÑ Presiona Ctrl+C para detener todos los servicios", color=Colors.WARNING)
        
        try:
            # Iniciar monitoreo en hilo separado
            monitor_thread = threading.Thread(target=self.monitor_services)
            monitor_thread.daemon = True
            monitor_thread.start()
            
            # Mantener el proceso principal vivo
            while self.running:
                time.sleep(1)
                
        except KeyboardInterrupt:
            pass
        finally:
            self.stop_all_services()
        
        return True

def main():
    """Funci√≥n principal."""
    try:
        manager = SkyGuardBackendManager()
        success = manager.start_complete_backend()
        sys.exit(0 if success else 1)
    except Exception as e:
        print(f"{Colors.FAIL}‚ùå Error cr√≠tico: {e}{Colors.ENDC}")
        sys.exit(1)

if __name__ == "__main__":
    main() 