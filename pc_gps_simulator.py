#!/usr/bin/env python3
"""
Simulador GPS para PC - Obtiene ubicaci√≥n real y la env√≠a al servidor SkyGuard
Versi√≥n mejorada que soporta m√∫ltiples m√©todos de obtenci√≥n de ubicaci√≥n.
"""

import socket
import time
import json
import sys
import threading
import requests
import random
import subprocess
import platform
from datetime import datetime
from typing import Optional, Dict, Any, Tuple

class PCLocationProvider:
    """Proveedor de ubicaci√≥n para PC usando m√∫ltiples m√©todos."""
    
    def __init__(self):
        """Inicializar el proveedor de ubicaci√≥n."""
        self.current_location = None
        self.last_update = None
        self.location_cache = {}
        
    def get_location_ip_geolocation(self) -> Optional[Dict[str, Any]]:
        """Obtener ubicaci√≥n usando servicios de geolocalizaci√≥n por IP."""
        services = [
            'http://ip-api.com/json/',
            'https://ipapi.co/json/',
            'https://ipinfo.io/json'
        ]
        
        for service in services:
            try:
                print(f"üåê Intentando obtener ubicaci√≥n desde: {service}")
                response = requests.get(service, timeout=10)
                data = response.json()
                
                # Procesar respuesta seg√∫n el servicio
                if 'ip-api.com' in service:
                    if data.get('status') == 'success':
                        return {
                            'latitude': data['lat'],
                            'longitude': data['lon'],
                            'accuracy': 5000,  # ~5km precisi√≥n
                            'speed': random.randint(0, 50),
                            'bearing': random.randint(0, 360),
                            'altitude': data.get('elevation', 0),
                            'timestamp': datetime.now(),
                            'source': 'ip-api.com',
                            'city': data.get('city', 'Unknown'),
                            'country': data.get('country', 'Unknown'),
                            'isp': data.get('isp', 'Unknown')
                        }
                
                elif 'ipapi.co' in service:
                    if data.get('latitude') and data.get('longitude'):
                        return {
                            'latitude': data['latitude'],
                            'longitude': data['longitude'],
                            'accuracy': 3000,
                            'speed': random.randint(0, 50),
                            'bearing': random.randint(0, 360),
                            'altitude': 0,
                            'timestamp': datetime.now(),
                            'source': 'ipapi.co',
                            'city': data.get('city', 'Unknown'),
                            'country': data.get('country_name', 'Unknown')
                        }
                        
            except Exception as e:
                print(f"‚ùå Error con {service}: {e}")
                continue
        
        return None
    
    def get_location_wifi_scanning(self) -> Optional[Dict[str, Any]]:
        """Obtener ubicaci√≥n usando escaneo de WiFi (Windows/Linux)."""
        try:
            if platform.system() == "Windows":
                return self._get_wifi_location_windows()
            elif platform.system() == "Linux":
                return self._get_wifi_location_linux()
        except Exception as e:
            print(f"‚ùå Error obteniendo ubicaci√≥n por WiFi: {e}")
        
        return None
    
    def _get_wifi_location_windows(self) -> Optional[Dict[str, Any]]:
        """Obtener ubicaci√≥n WiFi en Windows."""
        try:
            # Ejecutar comando netsh para obtener redes WiFi
            result = subprocess.run(
                ['netsh', 'wlan', 'show', 'profiles'],
                capture_output=True, text=True, timeout=10
            )
            
            if result.returncode == 0:
                # Simular ubicaci√≥n basada en redes WiFi detectadas
                networks_count = result.stdout.count('Profile')
                
                if networks_count > 0:
                    # Ubicaci√≥n simulada con base en cantidad de redes
                    # (M√©xico City como base)
                    base_lat = 19.4326
                    base_lon = -99.1332
                    
                    # Agregar variaci√≥n basada en redes detectadas
                    lat_offset = (networks_count % 10) * 0.001
                    lon_offset = (networks_count % 10) * 0.001
                    
                    return {
                        'latitude': base_lat + lat_offset,
                        'longitude': base_lon + lon_offset,
                        'accuracy': 100,  # ~100m precisi√≥n
                        'speed': 0,
                        'bearing': 0,
                        'altitude': 2240,  # Altitud aproximada de CDMX
                        'timestamp': datetime.now(),
                        'source': 'wifi_windows',
                        'networks_detected': networks_count
                    }
        except Exception as e:
            print(f"‚ùå Error WiFi Windows: {e}")
        
        return None
    
    def _get_wifi_location_linux(self) -> Optional[Dict[str, Any]]:
        """Obtener ubicaci√≥n WiFi en Linux."""
        try:
            # Usar iwlist para escanear redes WiFi
            result = subprocess.run(
                ['iwlist', 'scan'], capture_output=True, text=True, timeout=15
            )
            
            if result.returncode == 0:
                # Contar redes detectadas
                networks_count = result.stdout.count('ESSID:')
                
                if networks_count > 0:
                    # Ubicaci√≥n simulada basada en redes WiFi
                    base_lat = 19.4326
                    base_lon = -99.1332
                    
                    lat_offset = (networks_count % 10) * 0.001
                    lon_offset = (networks_count % 10) * 0.001
                    
                    return {
                        'latitude': base_lat + lat_offset,
                        'longitude': base_lon + lon_offset,
                        'accuracy': 150,
                        'speed': 0,
                        'bearing': 0,
                        'altitude': 2240,
                        'timestamp': datetime.now(),
                        'source': 'wifi_linux',
                        'networks_detected': networks_count
                    }
        except Exception as e:
            print(f"‚ùå Error WiFi Linux: {e}")
        
        return None
    
    def get_location_mock_realistic(self) -> Dict[str, Any]:
        """Obtener ubicaci√≥n simulada pero realista."""
        # Ubicaciones realistas en diferentes ciudades
        locations = [
            # Ciudad de M√©xico
            {"lat": 19.4326, "lon": -99.1332, "city": "Ciudad de M√©xico", "alt": 2240},
            {"lat": 19.4285, "lon": -99.1277, "city": "CDMX Centro", "alt": 2250},
            {"lat": 19.3910, "lon": -99.2837, "city": "Santa Fe", "alt": 2580},
            
            # Guadalajara
            {"lat": 20.6597, "lon": -103.3496, "city": "Guadalajara", "alt": 1566},
            
            # Monterrey
            {"lat": 25.6866, "lon": -100.3161, "city": "Monterrey", "alt": 538},
            
            # Puebla
            {"lat": 19.0414, "lon": -98.2063, "city": "Puebla", "alt": 2135},
        ]
        
        # Seleccionar ubicaci√≥n aleatoria
        location = random.choice(locations)
        
        # Agregar variaci√≥n para simular movimiento
        lat_offset = (random.random() - 0.5) * 0.005  # ~500m
        lon_offset = (random.random() - 0.5) * 0.005
        
        return {
            'latitude': location["lat"] + lat_offset,
            'longitude': location["lon"] + lon_offset,
            'accuracy': random.randint(5, 30),
            'speed': random.randint(0, 60),
            'bearing': random.randint(0, 360),
            'altitude': location["alt"] + random.randint(-10, 10),
            'timestamp': datetime.now(),
            'source': 'mock_realistic',
            'city': location["city"]
        }
    
    def get_current_location(self) -> Optional[Dict[str, Any]]:
        """Obtener la ubicaci√≥n actual usando el mejor m√©todo disponible."""
        print("üîç Obteniendo ubicaci√≥n actual...")
        
        # M√©todo 1: Geolocalizaci√≥n por IP (m√°s confiable)
        location = self.get_location_ip_geolocation()
        if location:
            print(f"‚úÖ Ubicaci√≥n obtenida por IP: {location['city']}, {location['country']}")
            return location
        
        # M√©todo 2: WiFi scanning
        location = self.get_location_wifi_scanning()
        if location:
            print(f"‚úÖ Ubicaci√≥n obtenida por WiFi: {location['networks_detected']} redes detectadas")
            return location
        
        # M√©todo 3: Ubicaci√≥n simulada realista
        location = self.get_location_mock_realistic()
        print(f"‚ö†Ô∏è Usando ubicaci√≥n simulada: {location['city']}")
        return location


class PCGPSSimulator:
    """Simulador GPS para PC que env√≠a datos al servidor SkyGuard."""
    
    def __init__(self, config_file: str = "pc_gps_config.json"):
        """Inicializar simulador GPS."""
        self.config = self.load_config(config_file)
        self.socket = None
        self.connected = False
        self.running = False
        self.location_provider = PCLocationProvider()
        self.stats = {
            'packets_sent': 0,
            'connection_time': None,
            'last_location': None,
            'errors': 0
        }
        
    def load_config(self, config_file: str) -> Dict[str, Any]:
        """Cargar configuraci√≥n desde archivo JSON."""
        default_config = {
            "host": "localhost",
            "port": 20332,
            "imei": f"PC{int(time.time())}",  # IMEI √∫nico basado en timestamp
            "password": "123456",
            "interval": 10,
            "protocol": "wialon",
            "device_name": f"PC-GPS-{platform.node()}",
            "auto_register": True,
            "use_real_location": True,
            "fallback_to_mock": True,
            "debug": True
        }
        
        try:
            with open(config_file, 'r') as f:
                config = json.load(f)
                # Combinar con configuraci√≥n por defecto
                default_config.update(config)
        except FileNotFoundError:
            print(f"‚ö†Ô∏è Archivo {config_file} no encontrado, usando configuraci√≥n por defecto")
            # Crear archivo de configuraci√≥n
            with open(config_file, 'w') as f:
                json.dump(default_config, f, indent=4)
                print(f"‚úÖ Archivo {config_file} creado")
        
        return default_config
    
    def connect(self) -> bool:
        """Conectar al servidor GPS."""
        try:
            print(f"üîÑ Conectando a {self.config['host']}:{self.config['port']}...")
            
            self.socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            self.socket.settimeout(10)
            self.socket.connect((self.config['host'], self.config['port']))
            
            # Enviar paquete de login Wialon
            login_packet = f"#L#{self.config['imei']};{self.config['password']}\r\n"
            self.socket.send(login_packet.encode('ascii'))
            
            print(f"üì§ Login enviado: {login_packet.strip()}")
            
            # Esperar respuesta
            try:
                response = self.socket.recv(1024)
                if response:
                    response_str = response.decode('ascii').strip()
                    print(f"üì• Respuesta del servidor: {response_str}")
                    
                    if "#AL#1" in response_str:
                        print("‚úÖ ¬°Login exitoso!")
                    else:
                        print("‚ö†Ô∏è Login con respuesta inesperada")
            except socket.timeout:
                print("‚è∞ Sin respuesta del servidor (normal en algunos casos)")
            
            self.connected = True
            self.stats['connection_time'] = datetime.now()
            print(f"‚úÖ Conectado como dispositivo: {self.config['device_name']}")
            return True
            
        except Exception as e:
            print(f"‚ùå Error de conexi√≥n: {e}")
            self.stats['errors'] += 1
            return False
    
    def send_location(self, location: Dict[str, Any]) -> bool:
        """Enviar datos de ubicaci√≥n al servidor."""
        if not self.connected or not self.socket:
            print("‚ùå No hay conexi√≥n al servidor")
            return False
        
        try:
            # Formatear timestamp para Wialon
            timestamp = location['timestamp'].strftime("%d%m%y;%H%M%S")
            
            # Crear paquete de datos Wialon
            # Formato: #D#fecha;hora;lat1;lat2;lon1;lon2;speed;course;height;sats;hdop;inputs;outputs;adc;ibutton;params
            lat_deg = int(abs(location['latitude']))
            lat_min = (abs(location['latitude']) - lat_deg) * 60
            
            lon_deg = int(abs(location['longitude']))
            lon_min = (abs(location['longitude']) - lon_deg) * 60
            
            # Ajustar signo para hemisferio
            if location['latitude'] < 0:
                lat_deg = -lat_deg
            if location['longitude'] < 0:
                lon_deg = -lon_deg
            
            data_packet = (
                f"#D#{timestamp};"
                f"{lat_deg};{lat_min:.2f};"
                f"{lon_deg};{lon_min:.2f};"
                f"{location['speed']:.1f};"
                f"{location['bearing']:.0f};"
                f"{location['altitude']:.0f};"
                f"8;"  # N√∫mero de sat√©lites
                f"1.0;"  # HDOP
                f"0;"  # inputs
                f"0;"  # outputs
                f"0;"  # adc
                f"00;"  # ibutton
                f"NA\r\n"  # params
            )
            
            self.socket.send(data_packet.encode('ascii'))
            
            if self.config['debug']:
                print(f"üì§ Enviado: {data_packet.strip()}")
                print(f"üìç Ubicaci√≥n: {location['latitude']:.6f}, {location['longitude']:.6f}")
                print(f"üöó Velocidad: {location['speed']} km/h, Rumbo: {location['bearing']}¬∞")
                if 'source' in location:
                    print(f"üîç Fuente: {location['source']}")
            
            # Esperar confirmaci√≥n
            try:
                response = self.socket.recv(1024)
                if response and self.config['debug']:
                    print(f"üì• Confirmaci√≥n: {response.decode('ascii').strip()}")
            except socket.timeout:
                pass  # No es cr√≠tico
            
            self.stats['packets_sent'] += 1
            self.stats['last_location'] = location
            return True
            
        except Exception as e:
            print(f"‚ùå Error enviando ubicaci√≥n: {e}")
            self.stats['errors'] += 1
            return False
    
    def send_ping(self) -> bool:
        """Enviar ping al servidor."""
        if not self.connected or not self.socket:
            return False
        
        try:
            ping_packet = "#P#\r\n"
            self.socket.send(ping_packet.encode('ascii'))
            
            if self.config['debug']:
                print("üíó Ping enviado")
            
            return True
        except Exception as e:
            print(f"‚ùå Error enviando ping: {e}")
            return False
    
    def start_tracking(self):
        """Iniciar el rastreo GPS."""
        if not self.connect():
            print("‚ùå No se pudo conectar al servidor")
            return
        
        self.running = True
        interval = self.config['interval']
        ping_counter = 0
        
        print(f"üöÄ Iniciando rastreo GPS (intervalo: {interval}s)")
        print("üîÑ Presiona Ctrl+C para detener")
        print("-" * 50)
        
        try:
            while self.running:
                # Obtener ubicaci√≥n actual
                location = self.location_provider.get_current_location()
                
                if location:
                    # Enviar ubicaci√≥n
                    success = self.send_location(location)
                    
                    if not success:
                        print("‚ö†Ô∏è Error enviando datos, intentando reconectar...")
                        if not self.connect():
                            print("‚ùå No se pudo reconectar")
                            break
                
                # Enviar ping cada 5 intervalos
                ping_counter += 1
                if ping_counter >= 5:
                    self.send_ping()
                    ping_counter = 0
                
                # Mostrar estad√≠sticas
                if self.stats['packets_sent'] % 10 == 0 and self.stats['packets_sent'] > 0:
                    self.show_stats()
                
                # Esperar siguiente intervalo
                time.sleep(interval)
                
        except KeyboardInterrupt:
            print("\nüõë Deteniendo rastreo GPS...")
        except Exception as e:
            print(f"\n‚ùå Error durante rastreo: {e}")
        finally:
            self.disconnect()
    
    def disconnect(self):
        """Desconectar del servidor."""
        self.running = False
        self.connected = False
        
        if self.socket:
            try:
                self.socket.close()
                print("üîå Desconectado del servidor")
            except:
                pass
    
    def show_stats(self):
        """Mostrar estad√≠sticas del simulador."""
        print("\nüìä ESTAD√çSTICAS:")
        print(f"   ‚Ä¢ Paquetes enviados: {self.stats['packets_sent']}")
        print(f"   ‚Ä¢ Errores: {self.stats['errors']}")
        print(f"   ‚Ä¢ Tiempo conectado: {datetime.now() - self.stats['connection_time'] if self.stats['connection_time'] else 'N/A'}")
        if self.stats['last_location']:
            loc = self.stats['last_location']
            print(f"   ‚Ä¢ √öltima ubicaci√≥n: {loc['latitude']:.6f}, {loc['longitude']:.6f}")
            print(f"   ‚Ä¢ Fuente: {loc.get('source', 'Unknown')}")
        print("-" * 50)


def main():
    """Funci√≥n principal."""
    print("=" * 60)
    print("üñ•Ô∏è  PC GPS SIMULATOR - SkyGuard")
    print("üåç Simulador GPS para PC con ubicaci√≥n real")
    print("=" * 60)
    
    # Verificar argumentos
    config_file = "pc_gps_config.json"
    if len(sys.argv) > 1:
        config_file = sys.argv[1]
    
    # Crear y ejecutar simulador
    simulator = PCGPSSimulator(config_file)
    
    print(f"üì± Dispositivo: {simulator.config['device_name']}")
    print(f"üÜî IMEI: {simulator.config['imei']}")
    print(f"üåê Servidor: {simulator.config['host']}:{simulator.config['port']}")
    print(f"‚è±Ô∏è  Intervalo: {simulator.config['interval']}s")
    print()
    
    try:
        simulator.start_tracking()
    except Exception as e:
        print(f"‚ùå Error fatal: {e}")
    finally:
        simulator.show_stats()
        print("‚úÖ Simulador GPS terminado")


if __name__ == "__main__":
    main() 