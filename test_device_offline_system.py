#!/usr/bin/env python
"""
Script para probar el sistema de detecci√≥n de dispositivos offline.
"""

import os
import sys
import time
import requests
import subprocess
from datetime import datetime, timedelta

# Configuraci√≥n
API_BASE_URL = "http://localhost:8000/api/gps"
FRONTEND_URL = "http://localhost:3000"
TEST_IMEI = "123456789012345"

def print_header(title):
    print("\n" + "="*60)
    print(f" {title}")
    print("="*60)

def print_step(step, description):
    print(f"\nüîπ Paso {step}: {description}")

def check_device_status():
    """Verificar el estado actual de los dispositivos."""
    try:
        response = requests.get(f"{API_BASE_URL}/devices/activity-status/")
        if response.status_code == 200:
            data = response.json()
            print(f"üìä Estad√≠sticas: {data['stats']}")
            
            for device in data['devices']:
                status_icon = "üü¢" if device['connection_status_real'] == 'ONLINE' else "üî¥"
                heartbeat_info = ""
                if device['heartbeat_age_seconds']:
                    heartbeat_info = f" (hace {device['heartbeat_age_seconds']:.0f}s)"
                
                print(f"   {status_icon} {device['imei']} ({device['name']}) - {device['connection_status_real']}{heartbeat_info}")
                
                if device['needs_update']:
                    print(f"      ‚ö†Ô∏è  Estado en BD: {device['connection_status_db']} (necesita actualizaci√≥n)")
            
            return data
        else:
            print(f"‚ùå Error al obtener estado: {response.status_code}")
            return None
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        return None

def force_check_devices():
    """Forzar verificaci√≥n de todos los dispositivos."""
    try:
        response = requests.post(f"{API_BASE_URL}/devices/check-status/", json={'timeout': 60})
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Verificaci√≥n completada:")
            print(f"   - Dispositivos verificados: {data['devices_checked']}")
            print(f"   - Marcados como offline: {data['devices_updated_to_offline']}")
            print(f"   - A√∫n online: {data['devices_still_online']}")
            return data
        else:
            print(f"‚ùå Error en verificaci√≥n: {response.status_code}")
            return None
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        return None

def test_device_connection(imei):
    """Probar conexi√≥n de un dispositivo espec√≠fico."""
    try:
        response = requests.post(f"{API_BASE_URL}/devices/{imei}/test-connection/")
        if response.status_code == 200:
            data = response.json()
            status_icon = "‚úÖ" if data['success'] else "‚ùå"
            print(f"{status_icon} Test de conexi√≥n: {data['message']}")
            return data
        else:
            print(f"‚ùå Error en test de conexi√≥n: {response.status_code}")
            return None
    except Exception as e:
        print(f"‚ùå Error de conexi√≥n: {e}")
        return None

def run_device_monitor_command():
    """Ejecutar el comando de monitoreo de dispositivos."""
    print("üöÄ Iniciando monitor de dispositivos (presiona Ctrl+C para detener)...")
    try:
        # Ejecutar el comando en background por 60 segundos para demostraci√≥n
        process = subprocess.Popen([
            'python', 'manage.py', 'start_device_monitor', 
            '--timeout', '1',  # 1 minuto para prueba r√°pida
            '--interval', '60',  # Verificar cada 60 segundos (1 minuto)
            '--verbose'
        ], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        
        # Leer salida por 60 segundos
        start_time = time.time()
        while time.time() - start_time < 60:
            if process.poll() is not None:
                break
            time.sleep(1)
        
        # Terminar el proceso
        process.terminate()
        stdout, stderr = process.communicate(timeout=5)
        
        print("üìù Salida del monitor:")
        print(stdout)
        if stderr:
            print("‚ö†Ô∏è  Errores:")
            print(stderr)
            
    except subprocess.TimeoutExpired:
        process.kill()
        print("‚è∞ Monitor detenido despu√©s de 60 segundos")
    except Exception as e:
        print(f"‚ùå Error ejecutando monitor: {e}")

def main():
    print_header("PRUEBA DEL SISTEMA DE DETECCI√ìN DE DISPOSITIVOS OFFLINE")
    
    print("Este script probar√° el sistema autom√°tico para marcar dispositivos como offline")
    print("cuando no reciben peticiones o conexiones.")
    
    # Paso 1: Verificar estado inicial
    print_step(1, "Verificando estado inicial de dispositivos")
    initial_status = check_device_status()
    
    if not initial_status:
        print("‚ùå No se pudo obtener el estado inicial. Verifica que el servidor est√© ejecut√°ndose.")
        return
    
    # Paso 2: Forzar verificaci√≥n manual
    print_step(2, "Ejecutando verificaci√≥n manual de dispositivos")
    force_check_devices()
    
    # Paso 3: Verificar estado despu√©s de la verificaci√≥n
    print_step(3, "Verificando estado despu√©s de la verificaci√≥n manual")
    check_device_status()
    
    # Paso 4: Probar conexi√≥n de dispositivo espec√≠fico
    if TEST_IMEI:
        print_step(4, f"Probando conexi√≥n del dispositivo {TEST_IMEI}")
        test_device_connection(TEST_IMEI)
    
    # Paso 5: Ejecutar monitor autom√°tico
    print_step(5, "Ejecutando monitor autom√°tico de dispositivos")
    run_device_monitor_command()
    
    # Paso 6: Verificar estado final
    print_step(6, "Verificando estado final despu√©s del monitoreo")
    final_status = check_device_status()
    
    print_header("RESUMEN DE LA PRUEBA")
    
    if initial_status and final_status:
        initial_stats = initial_status['stats']
        final_stats = final_status['stats']
        
        print(f"üìä Estado inicial: {initial_stats['online']} online, {initial_stats['offline']} offline")
        print(f"üìä Estado final:   {final_stats['online']} online, {final_stats['offline']} offline")
        
        if final_stats['offline'] > initial_stats['offline']:
            print("‚úÖ El sistema detect√≥ y marc√≥ dispositivos como offline correctamente")
        else:
            print("‚ÑπÔ∏è  No se detectaron cambios (puede ser normal si todos los dispositivos est√°n activos)")
    
    print("\nüîó URLs √∫tiles:")
    print(f"   - API de estado: {API_BASE_URL}/devices/activity-status/")
    print(f"   - Frontend:      {FRONTEND_URL}/devices")
    print(f"   - Verificaci√≥n:  {API_BASE_URL}/devices/check-status/")
    
    print("\nüìù Comandos √∫tiles:")
    print("   - python manage.py quick_device_monitor --quiet     # Monitor cada minuto (recomendado)")
    print("   - python manage.py start_device_monitor --verbose   # Monitor configurable")
    print("   - python manage.py check_device_status --dry-run    # Verificaci√≥n √∫nica")
    print("   - python gps_simulator.py                           # Simular actividad de dispositivo")

if __name__ == "__main__":
    main() 