#!/usr/bin/env python3
"""
Demostraci√≥n completa del sistema GPS SkyGuard
Este script muestra el flujo completo de funcionamiento del sistema.
"""

import subprocess
import time
import sys
import threading
import signal
import os

class GPSSystemDemo:
    def __init__(self):
        self.processes = []
        self.running = True
        
    def signal_handler(self, signum, frame):
        print("\nüõë Deteniendo demostraci√≥n...")
        self.running = False
        self.cleanup()
        sys.exit(0)
        
    def cleanup(self):
        """Limpiar procesos en ejecuci√≥n"""
        for proc in self.processes:
            try:
                proc.terminate()
                proc.wait(timeout=5)
            except:
                try:
                    proc.kill()
                except:
                    pass
                    
    def run_command(self, cmd, description, background=False):
        """Ejecutar comando con descripci√≥n"""
        print(f"üöÄ {description}")
        print(f"   Comando: {' '.join(cmd)}")
        
        if background:
            proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            self.processes.append(proc)
            print(f"   ‚úÖ Proceso iniciado en background (PID: {proc.pid})")
            return proc
        else:
            result = subprocess.run(cmd, capture_output=True, text=True)
            if result.returncode == 0:
                print(f"   ‚úÖ √âxito")
                if result.stdout:
                    print(f"   üì§ Salida: {result.stdout.strip()}")
            else:
                print(f"   ‚ùå Error (c√≥digo: {result.returncode})")
                if result.stderr:
                    print(f"   üì§ Error: {result.stderr.strip()}")
            return result
            
    def demo_step_1_check_environment(self):
        """Paso 1: Verificar entorno"""
        print("\n" + "="*60)
        print("üìã PASO 1: VERIFICACI√ìN DEL ENTORNO")
        print("="*60)
        
        # Verificar Django
        cmd = ['python', 'manage.py', '--version']
        self.run_command(cmd, "Verificando versi√≥n de Django")
        
        # Verificar base de datos
        cmd = ['python', 'manage.py', 'check']
        self.run_command(cmd, "Verificando configuraci√≥n del sistema")
        
    def demo_step_2_start_servers(self):
        """Paso 2: Iniciar servidores GPS"""
        print("\n" + "="*60)
        print("üåê PASO 2: INICIANDO SERVIDORES GPS")
        print("="*60)
        
        # Mostrar estado inicial
        cmd = ['python', 'manage.py', 'gps_servers', 'status']
        self.run_command(cmd, "Estado inicial de servidores")
        
        # Iniciar servidores
        cmd = ['python', 'manage.py', 'gps_servers', 'start']
        proc = self.run_command(cmd, "Iniciando todos los servidores GPS", background=True)
        
        # Esperar un momento para que inicien
        time.sleep(3)
        
        # Verificar estado despu√©s del inicio
        cmd = ['python', 'manage.py', 'gps_servers', 'status']
        self.run_command(cmd, "Estado despu√©s del inicio")
        
    def demo_step_3_simulate_device(self):
        """Paso 3: Simular dispositivo GPS"""
        print("\n" + "="*60)
        print("üì± PASO 3: SIMULANDO DISPOSITIVO GPS")
        print("="*60)
        
        # Mostrar servidores disponibles
        cmd = ['python', 'gps_simulator.py', '--list-servers']
        self.run_command(cmd, "Servidores GPS disponibles")
        
        # Simular dispositivo Wialon Legacy
        print("\nüéØ Simulando dispositivo Wialon Legacy...")
        cmd = ['python', 'gps_simulator.py', '--server', 'wialon_legacy', '--imei', '123456789012345']
        proc = self.run_command(cmd, "Iniciando simulador GPS Wialon Legacy", background=True)
        
        # Simular dispositivo Concox
        print("\nüéØ Simulando dispositivo Concox...")
        cmd = ['python', 'gps_simulator.py', '--server', 'concox', '--imei', '987654321098765']
        proc2 = self.run_command(cmd, "Iniciando simulador GPS Concox", background=True)
        
        return [proc, proc2]
        
    def demo_step_4_monitor_activity(self):
        """Paso 4: Monitorear actividad"""
        print("\n" + "="*60)
        print("üìä PASO 4: MONITOREANDO ACTIVIDAD")
        print("="*60)
        
        # Verificar estad√≠sticas
        cmd = ['python', 'manage.py', 'gps_servers', 'stats']
        self.run_command(cmd, "Estad√≠sticas del sistema")
        
        # Mostrar dispositivos conectados
        print("\nüì± Verificando dispositivos en base de datos...")
        cmd = ['python', 'manage.py', 'shell', '-c', '''
from skyguard.apps.gps.models.device import GPSDevice
devices = GPSDevice.objects.all()
print(f"Total de dispositivos: {devices.count()}")
for device in devices:
    print(f"  - IMEI: {device.imei}, Estado: {device.connection_status}")
    if device.position:
        print(f"    Posici√≥n: {device.position.y:.6f}, {device.position.x:.6f}")
''']
        self.run_command(cmd, "Consultando dispositivos registrados")
        
    def demo_step_5_test_apis(self):
        """Paso 5: Probar APIs"""
        print("\n" + "="*60)
        print("üîå PASO 5: PROBANDO APIs REST")
        print("="*60)
        
        # Probar API de dispositivos (requiere servidor web)
        print("üí° Para probar las APIs REST, ejecuta:")
        print("   python manage.py runserver 8000")
        print("   curl http://localhost:8000/api/gps/devices/")
        
    def run_demo(self):
        """Ejecutar demostraci√≥n completa"""
        signal.signal(signal.SIGINT, self.signal_handler)
        signal.signal(signal.SIGTERM, self.signal_handler)
        
        print("üé¨ DEMOSTRACI√ìN DEL SISTEMA GPS SKYGUARD")
        print("=" * 60)
        print("Esta demostraci√≥n muestra el flujo completo del sistema:")
        print("1. Verificaci√≥n del entorno")
        print("2. Inicio de servidores GPS")
        print("3. Simulaci√≥n de dispositivos GPS")
        print("4. Monitoreo de actividad")
        print("5. Prueba de APIs")
        print("\nPresiona Ctrl+C para detener en cualquier momento")
        print("=" * 60)
        
        try:
            # Ejecutar pasos de la demostraci√≥n
            self.demo_step_1_check_environment()
            time.sleep(2)
            
            self.demo_step_2_start_servers()
            time.sleep(5)
            
            simulators = self.demo_step_3_simulate_device()
            time.sleep(10)  # Dejar que los simuladores env√≠en datos
            
            self.demo_step_4_monitor_activity()
            time.sleep(2)
            
            self.demo_step_5_test_apis()
            
            print("\n" + "="*60)
            print("‚úÖ DEMOSTRACI√ìN COMPLETADA")
            print("="*60)
            print("üîÑ Los servidores y simuladores siguen ejecut√°ndose...")
            print("üìä Puedes verificar los datos en:")
            print("   - Admin: http://localhost:8000/admin/")
            print("   - API: http://localhost:8000/api/gps/")
            print("\nüõë Presiona Ctrl+C para detener todo")
            
            # Mantener demostraci√≥n activa
            while self.running:
                time.sleep(1)
                
        except KeyboardInterrupt:
            pass
        finally:
            self.cleanup()

def main():
    """Funci√≥n principal"""
    # Verificar que estamos en el directorio correcto
    if not os.path.exists('manage.py'):
        print("‚ùå Error: Este script debe ejecutarse desde el directorio ra√≠z del proyecto Django")
        print("   Aseg√∫rate de estar en el directorio que contiene manage.py")
        sys.exit(1)
        
    # Verificar que el entorno virtual est√° activado
    if not hasattr(sys, 'real_prefix') and not (hasattr(sys, 'base_prefix') and sys.base_prefix != sys.prefix):
        print("‚ö†Ô∏è  Advertencia: No se detect√≥ un entorno virtual activado")
        print("   Recomendamos activar el entorno virtual con: source venv/bin/activate")
        
    demo = GPSSystemDemo()
    demo.run_demo()

if __name__ == "__main__":
    main() 