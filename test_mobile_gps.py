#!/usr/bin/env python3
"""
Script de prueba para usar celular como GPS con SkyGuard
Este script demuestra c√≥mo conectar tu celular como dispositivo GPS
"""

import os
import sys
import time
import threading
import subprocess
import requests
from datetime import datetime

def print_banner():
    """Imprimir banner del sistema."""
    print("=" * 60)
    print("üöó SKYGUARD GPS M√ìVIL - SISTEMA DE PRUEBA")
    print("=" * 60)
    print("Este sistema permite usar tu celular como dispositivo GPS")
    print("y conectarlo a la aplicaci√≥n SkyGuard para tracking en tiempo real.")
    print("=" * 60)

def check_dependencies():
    """Verificar que todas las dependencias est√©n instaladas."""
    print("üîç Verificando dependencias...")
    
    required_packages = ['flask', 'requests', 'django']
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package)
            print(f"‚úÖ {package}")
        except ImportError:
            missing_packages.append(package)
            print(f"‚ùå {package} - FALTANTE")
    
    if missing_packages:
        print(f"\n‚ö†Ô∏è  Paquetes faltantes: {', '.join(missing_packages)}")
        print("Ejecuta: pip install " + " ".join(missing_packages))
        return False
    
    print("‚úÖ Todas las dependencias est√°n instaladas")
    return True

def get_local_ip():
    """Obtener la IP local del sistema."""
    try:
        import socket
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.connect(("8.8.8.8", 80))
        ip = s.getsockname()[0]
        s.close()
        return ip
    except:
        return "localhost"

def start_bluetooth_server():
    """Iniciar el servidor Bluetooth de SkyGuard."""
    print("\nüîß Iniciando servidor Bluetooth SkyGuard...")
    
    try:
        # Verificar si el script del servidor existe
        server_script = os.path.join('skyguard', 'apps', 'tracking', 'BluServer.py')
        if not os.path.exists(server_script):
            print(f"‚ùå No se encontr√≥ el servidor Bluetooth en: {server_script}")
            return None
        
        # Iniciar el servidor en segundo plano
        cmd = [sys.executable, server_script]
        process = subprocess.Popen(
            cmd,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        
        # Esperar un momento para verificar que se inici√≥
        time.sleep(3)
        
        if process.poll() is None:
            print("‚úÖ Servidor Bluetooth iniciado en puerto 50100")
            return process
        else:
            print("‚ùå Error al iniciar el servidor Bluetooth")
            return None
            
    except Exception as e:
        print(f"‚ùå Error iniciando servidor: {e}")
        return None

def start_web_interface():
    """Iniciar la interfaz web para el GPS m√≥vil."""
    print("\nüåê Iniciando interfaz web GPS m√≥vil...")
    
    try:
        # Importar y ejecutar la interfaz web
        from mobile_gps_web_interface import app
        
        # Obtener IP local
        local_ip = get_local_ip()
        
        print(f"‚úÖ Interfaz web iniciada en: http://{local_ip}:5000")
        print("üì± Abre esta URL en tu celular para controlar el GPS")
        
        # Ejecutar en un thread separado
        def run_web_server():
            app.run(host='0.0.0.0', port=5000, debug=False)
        
        web_thread = threading.Thread(target=run_web_server, daemon=True)
        web_thread.start()
        
        return web_thread
        
    except Exception as e:
        print(f"‚ùå Error iniciando interfaz web: {e}")
        return None

def test_gps_connection():
    """Probar la conexi√≥n GPS."""
    print("\nüß™ Probando conexi√≥n GPS...")
    
    try:
        # Crear un cliente de prueba
        from mobile_gps_simulator import MobileGPSSimulator
        
        simulator = MobileGPSSimulator()
        
        # Intentar conectar
        if simulator.connect():
            print("‚úÖ Conexi√≥n GPS exitosa")
            
            # Enviar una posici√≥n de prueba
            simulator.update_position(19.4326, -99.1332, 25.0, 90.0)
            simulator.send_ping()
            
            simulator.disconnect()
            return True
        else:
            print("‚ùå Error en conexi√≥n GPS")
            return False
            
    except Exception as e:
        print(f"‚ùå Error en prueba GPS: {e}")
        return False

def show_instructions():
    """Mostrar instrucciones de uso."""
    local_ip = get_local_ip()
    
    print("\n" + "=" * 60)
    print("üìã INSTRUCCIONES DE USO")
    print("=" * 60)
    print("1. El servidor Bluetooth est√° ejecut√°ndose en puerto 50100")
    print("2. La interfaz web est√° disponible en:")
    print(f"   üì± http://{local_ip}:5000")
    print("\n3. En tu celular:")
    print("   - Abre el navegador")
    print("   - Ve a la URL mostrada arriba")
    print("   - Permite acceso a la ubicaci√≥n cuando se solicite")
    print("   - Haz clic en 'Conectar'")
    print("   - Usa 'Obtener Ubicaci√≥n Actual' para GPS real")
    print("   - O ingresa coordenadas manualmente")
    print("   - Haz clic en 'Enviar Posici√≥n'")
    print("\n4. En SkyGuard:")
    print("   - Ve al panel de dispositivos")
    print("   - Busca el dispositivo con IMEI: 123456789012345")
    print("   - Ver√°s la posici√≥n en tiempo real")
    print("\n5. Para env√≠o autom√°tico:")
    print("   - Activa 'Env√≠o autom√°tico cada 30 segundos'")
    print("   - El GPS se actualizar√° autom√°ticamente")
    print("=" * 60)

def monitor_system():
    """Monitorear el sistema en ejecuci√≥n."""
    print("\nüîÑ Sistema en ejecuci√≥n. Presiona Ctrl+C para detener.")
    print("üìä Monitoreando actividad...")
    
    try:
        while True:
            time.sleep(10)
            print(f"‚è∞ {datetime.now().strftime('%H:%M:%S')} - Sistema activo")
    except KeyboardInterrupt:
        print("\nüõë Deteniendo sistema...")

def main():
    """Funci√≥n principal."""
    print_banner()
    
    # Verificar dependencias
    if not check_dependencies():
        print("\n‚ùå Faltan dependencias. Inst√°lalas y vuelve a intentar.")
        return
    
    # Iniciar servidor Bluetooth
    bluetooth_process = start_bluetooth_server()
    if not bluetooth_process:
        print("\n‚ùå No se pudo iniciar el servidor Bluetooth")
        return
    
    # Iniciar interfaz web
    web_thread = start_web_interface()
    if not web_thread:
        print("\n‚ùå No se pudo iniciar la interfaz web")
        bluetooth_process.terminate()
        return
    
    # Probar conexi√≥n GPS
    if test_gps_connection():
        print("‚úÖ Sistema GPS funcionando correctamente")
    else:
        print("‚ö†Ô∏è  Advertencia: Problemas con la conexi√≥n GPS")
    
    # Mostrar instrucciones
    show_instructions()
    
    # Monitorear sistema
    try:
        monitor_system()
    except KeyboardInterrupt:
        pass
    finally:
        # Limpiar procesos
        print("\nüßπ Limpiando procesos...")
        if bluetooth_process:
            bluetooth_process.terminate()
            print("‚úÖ Servidor Bluetooth detenido")
        print("‚úÖ Sistema detenido correctamente")

if __name__ == "__main__":
    main() 