# Generated by Django 5.2.3 on 2025-06-15 00:47

import django.contrib.gis.db.models.fields
import django.db.models.deletion
import django.utils.timezone
import skyguard.apps.gps.models.device
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('gps', '0009_alter_gpsevent_raw_data'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CardTransaction',
            fields=[
                ('line_name', models.TextField(db_column='nombre_linea', verbose_name='line name')),
                ('branch_name', models.TextField(db_column='nombre_ramal', verbose_name='branch name')),
                ('line', models.IntegerField(db_column='linea', verbose_name='line')),
                ('economico', models.IntegerField(db_column='economico', verbose_name='economic')),
                ('date', models.DateTimeField(db_column='dfecha', primary_key=True, serialize=False, verbose_name='date')),
                ('type', models.IntegerField(db_column='itipo', verbose_name='type')),
                ('unit', models.CharField(db_column='cunidad', max_length=12, verbose_name='unit')),
                ('card', models.IntegerField(db_column='itarjeta', verbose_name='card')),
                ('amount', models.IntegerField(db_column='imonto', verbose_name='amount')),
            ],
            options={
                'verbose_name': 'card transaction',
                'verbose_name_plural': 'card transactions',
                'db_table': 'tbltarjetas',
                'ordering': ['line', 'economico', 'date'],
                'get_latest_by': 'date',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='AccelerationLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ('date', models.DateTimeField()),
                ('duration', models.DecimalField(decimal_places=4, default=0.0, max_digits=6)),
                ('error_duration', models.DecimalField(decimal_places=4, default=0.0, max_digits=6)),
                ('entry', models.DecimalField(decimal_places=4, default=0.0, max_digits=6)),
                ('error_entry', models.DecimalField(decimal_places=4, default=0.0, max_digits=6)),
                ('peak', models.DecimalField(decimal_places=4, default=0.0, max_digits=6)),
                ('error_exit', models.DecimalField(decimal_places=4, default=0.0, max_digits=6)),
                ('exit', models.DecimalField(decimal_places=4, default=0.0, max_digits=6)),
            ],
            options={
                'verbose_name': 'acceleration log',
                'verbose_name_plural': 'acceleration logs',
                'ordering': ['device', 'date'],
            },
        ),
        migrations.CreateModel(
            name='AddressCache',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ('date', models.DateTimeField()),
                ('text', models.TextField(default='N/D')),
            ],
            options={
                'verbose_name': 'address cache',
                'verbose_name_plural': 'address cache',
            },
        ),
        migrations.CreateModel(
            name='AlarmLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sensor', models.CharField(max_length=32, verbose_name='sensor serial')),
                ('date', models.DateTimeField()),
                ('checksum', models.IntegerField()),
                ('duration', models.IntegerField()),
                ('comment', models.CharField(max_length=24)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'alarm log',
                'verbose_name_plural': 'alarm logs',
                'ordering': ['-date'],
                'get_latest_by': 'date',
            },
        ),
        migrations.CreateModel(
            name='CarLane',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prefix', models.CharField(max_length=5, verbose_name='prefix')),
                ('slot_count', models.SmallIntegerField(default=62, verbose_name='slot count')),
                ('start', django.contrib.gis.db.models.fields.PointField(srid=4326, verbose_name='start')),
                ('end', django.contrib.gis.db.models.fields.PointField(srid=4326, verbose_name='end')),
                ('single', models.BooleanField(default=False, verbose_name='single')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'car lane',
                'verbose_name_plural': 'car lanes',
                'ordering': ['park', 'prefix'],
            },
        ),
        migrations.CreateModel(
            name='CarPark',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, verbose_name='name')),
                ('description', models.TextField(blank=True, max_length=200, null=True, verbose_name='description')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'car park',
                'verbose_name_plural': 'car parks',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='CarSlot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.SmallIntegerField(verbose_name='number')),
                ('position', django.contrib.gis.db.models.fields.PointField(srid=4326, verbose_name='position')),
                ('car_serial', models.CharField(blank=True, db_index=True, max_length=80, null=True, verbose_name='car serial')),
                ('car_date', models.DateTimeField(blank=True, null=True, verbose_name='car date')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'car slot',
                'verbose_name_plural': 'car slots',
                'ordering': ['lane', 'number'],
            },
        ),
        migrations.CreateModel(
            name='DemoCar',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', django.contrib.gis.db.models.fields.PointField(srid=4326, verbose_name='position')),
                ('car_serial', models.CharField(blank=True, db_index=True, max_length=80, null=True, verbose_name='car serial')),
                ('car_date', models.DateTimeField(blank=True, null=True, verbose_name='car date')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'demo car',
                'verbose_name_plural': 'demo cars',
                'ordering': ['-car_date'],
            },
        ),
        migrations.CreateModel(
            name='DeviceHarness',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, unique=True, verbose_name='name')),
                ('in00', models.CharField(default='PANIC', max_length=32, verbose_name='input 0')),
                ('in01', models.CharField(default='IGNITION', max_length=32, verbose_name='input 1')),
                ('in02', models.CharField(blank=True, max_length=32, verbose_name='input 2')),
                ('in03', models.CharField(blank=True, max_length=32, verbose_name='input 3')),
                ('in04', models.CharField(blank=True, max_length=32, verbose_name='input 4')),
                ('in05', models.CharField(blank=True, max_length=32, verbose_name='input 5')),
                ('in06', models.CharField(default='BAT_DOK', max_length=32, verbose_name='input 6')),
                ('in07', models.CharField(default='BAT_CHG', max_length=32, verbose_name='input 7')),
                ('in08', models.CharField(default='BAT_FLT', max_length=32, verbose_name='input 8')),
                ('in09', models.CharField(blank=True, max_length=32, verbose_name='input 9')),
                ('in10', models.CharField(blank=True, max_length=32, verbose_name='input 10')),
                ('in11', models.CharField(blank=True, max_length=32, verbose_name='input 11')),
                ('in12', models.CharField(blank=True, max_length=32, verbose_name='input 12')),
                ('in13', models.CharField(blank=True, max_length=32, verbose_name='input 13')),
                ('in14', models.CharField(blank=True, max_length=32, verbose_name='input 14')),
                ('in15', models.CharField(blank=True, max_length=32, verbose_name='input 15')),
                ('out00', models.CharField(default='MOTOR', max_length=32, verbose_name='output 0')),
                ('out01', models.CharField(blank=True, max_length=32, verbose_name='output 1')),
                ('out02', models.CharField(blank=True, max_length=32, verbose_name='output 2')),
                ('out03', models.CharField(blank=True, max_length=32, verbose_name='output 3')),
                ('out04', models.CharField(blank=True, max_length=32, verbose_name='output 4')),
                ('out05', models.CharField(blank=True, max_length=32, verbose_name='output 5')),
                ('out06', models.CharField(blank=True, max_length=32, verbose_name='output 6')),
                ('out07', models.CharField(blank=True, max_length=32, verbose_name='output 7')),
                ('out08', models.CharField(blank=True, max_length=32, verbose_name='output 8')),
                ('out09', models.CharField(blank=True, max_length=32, verbose_name='output 9')),
                ('out10', models.CharField(blank=True, max_length=32, verbose_name='output 10')),
                ('out11', models.CharField(blank=True, max_length=32, verbose_name='output 11')),
                ('out12', models.CharField(blank=True, max_length=32, verbose_name='output 12')),
                ('out13', models.CharField(blank=True, max_length=32, verbose_name='output 13')),
                ('out14', models.CharField(blank=True, max_length=32, verbose_name='output 14')),
                ('out15', models.CharField(blank=True, max_length=32, verbose_name='output 15')),
                ('input_config', models.CharField(blank=True, max_length=32, verbose_name='input configuration')),
            ],
            options={
                'verbose_name': 'device harness',
                'verbose_name_plural': 'device harnesses',
            },
        ),
        migrations.CreateModel(
            name='DeviceSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('ip_address', models.GenericIPAddressField()),
                ('port', models.PositiveIntegerField()),
                ('protocol', models.CharField(max_length=50)),
                ('is_active', models.BooleanField(default=True)),
                ('last_activity', models.DateTimeField(auto_now=True)),
                ('bytes_sent', models.PositiveBigIntegerField(default=0)),
                ('bytes_received', models.PositiveBigIntegerField(default=0)),
                ('packets_sent', models.PositiveIntegerField(default=0)),
                ('packets_received', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-start_time'],
            },
        ),
        migrations.CreateModel(
            name='DeviceStats',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20, verbose_name='name')),
                ('route', models.IntegerField(choices=[(92, 'Ruta 4'), (112, 'Ruta 6'), (114, 'Ruta 12'), (115, 'Ruta 31'), (90, 'Ruta 82'), (88, 'Ruta 118'), (215, 'Ruta 140'), (89, 'Ruta 202'), (116, 'Ruta 207'), (96, 'Ruta 400'), (97, 'Ruta 408')])),
                ('economico', models.IntegerField()),
                ('date_start', models.DateTimeField(null=True, verbose_name='start date')),
                ('date_end', models.DateTimeField(verbose_name='end date')),
                ('latitude', models.IntegerField(blank=True, null=True)),
                ('longitude', models.IntegerField(blank=True, null=True)),
                ('distance', models.IntegerField(blank=True, null=True)),
                ('sub_del', models.IntegerField(blank=True, null=True)),
                ('baj_del', models.IntegerField(blank=True, null=True)),
                ('sub_tra', models.IntegerField(blank=True, null=True)),
                ('baj_tra', models.IntegerField(blank=True, null=True)),
                ('speed_avg', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'verbose_name': 'device statistics',
                'verbose_name_plural': 'device statistics',
                'ordering': ['-date_end'],
            },
        ),
        migrations.CreateModel(
            name='Driver',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40, verbose_name='name')),
                ('middle_name', models.CharField(max_length=40, verbose_name='middle name')),
                ('last_name', models.CharField(max_length=40, verbose_name='last name')),
                ('birth_date', models.DateField(verbose_name='birth date')),
                ('civil_status', models.CharField(choices=[('SOL', 'Soltero'), ('CAS', 'Casado'), ('VIU', 'Viudo'), ('DIV', 'Divorciado')], max_length=3, verbose_name='civil status')),
                ('payroll', models.CharField(max_length=40, verbose_name='payroll')),
                ('social_security', models.CharField(max_length=40, verbose_name='social security')),
                ('tax_id', models.CharField(max_length=40, verbose_name='tax ID')),
                ('license', models.CharField(blank=True, max_length=40, null=True, verbose_name='license')),
                ('license_expiry', models.DateField(blank=True, null=True, verbose_name='license expiry')),
                ('address', models.TextField(verbose_name='address')),
                ('phone', models.CharField(max_length=40, verbose_name='phone')),
                ('phone1', models.CharField(blank=True, max_length=40, null=True, verbose_name='phone 1')),
                ('phone2', models.CharField(blank=True, max_length=40, null=True, verbose_name='phone 2')),
                ('is_active', models.BooleanField(default=True, verbose_name='active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'driver',
                'verbose_name_plural': 'drivers',
                'ordering': ['middle_name', 'last_name', 'name'],
            },
        ),
        migrations.CreateModel(
            name='GPRSPacket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request', models.TextField()),
                ('response', models.TextField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'GPRS packet',
                'verbose_name_plural': 'GPRS packets',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='GPRSRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('id_byte', models.SmallIntegerField()),
                ('data', models.TextField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'GPRS record',
                'verbose_name_plural': 'GPRS records',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='GPRSSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('end', models.DateTimeField(auto_now=True)),
                ('ip', models.GenericIPAddressField()),
                ('port', models.IntegerField()),
                ('bytes_transferred', models.PositiveIntegerField(default=0)),
                ('packets_count', models.PositiveIntegerField(default=0)),
                ('records_count', models.PositiveIntegerField(default=0)),
                ('events_count', models.PositiveIntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'GPRS session',
                'verbose_name_plural': 'GPRS sessions',
                'ordering': ['-start'],
            },
        ),
        migrations.CreateModel(
            name='GridlessCar',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', django.contrib.gis.db.models.fields.PointField(srid=4326, verbose_name='position')),
                ('car_serial', models.CharField(blank=True, db_index=True, max_length=80, null=True, verbose_name='car serial')),
                ('car_date', models.DateTimeField(blank=True, null=True, verbose_name='car date')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'gridless car',
                'verbose_name_plural': 'gridless cars',
                'ordering': ['-car_date'],
            },
        ),
        migrations.CreateModel(
            name='GSMEvent',
            fields=[
                ('gpsevent_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='gps.gpsevent')),
            ],
            options={
                'verbose_name': 'GSM event',
                'verbose_name_plural': 'GSM events',
            },
            bases=('gps.gpsevent',),
        ),
        migrations.CreateModel(
            name='IOEvent',
            fields=[
                ('gpsevent_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='gps.gpsevent')),
                ('input_delta', models.IntegerField(default=0)),
                ('output_delta', models.IntegerField(default=0)),
                ('alarm_delta', models.IntegerField(default=0)),
                ('changes', models.TextField(blank=True)),
            ],
            options={
                'verbose_name': 'IO event',
                'verbose_name_plural': 'IO events',
            },
            bases=('gps.gpsevent',),
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('position', django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ('speed', models.FloatField(default=0.0)),
                ('course', models.FloatField(default=0.0)),
                ('altitude', models.FloatField(default=0.0)),
                ('satellites', models.PositiveSmallIntegerField(default=0)),
                ('accuracy', models.FloatField(default=0.0)),
                ('hdop', models.FloatField(default=0.0)),
                ('pdop', models.FloatField(default=0.0)),
                ('fix_quality', models.PositiveSmallIntegerField(default=0)),
                ('fix_type', models.PositiveSmallIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Overlay',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, unique=True, verbose_name='name')),
                ('geometry', django.contrib.gis.db.models.fields.LineStringField(srid=4326, verbose_name='line')),
                ('base', models.IntegerField(blank=True, choices=[(92, 'Ruta 4'), (112, 'Ruta 6'), (114, 'Ruta 12'), (115, 'Ruta 31'), (90, 'Ruta 82'), (88, 'Ruta 118'), (215, 'Ruta 140'), (89, 'Ruta 202'), (116, 'Ruta 207'), (96, 'Ruta 400'), (97, 'Ruta 408')], null=True)),
            ],
            options={
                'verbose_name': 'overlay',
                'verbose_name_plural': 'overlays',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='PressureSensorCalibration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sensor', models.CharField(max_length=32, verbose_name='sensor serial')),
                ('offset_psi1', models.DecimalField(decimal_places=6, max_digits=10, verbose_name='PSI1 offset')),
                ('offset_psi2', models.DecimalField(decimal_places=6, max_digits=10, verbose_name='PSI2 offset')),
                ('multiplier_psi1', models.DecimalField(decimal_places=6, max_digits=10, verbose_name='PSI1 multiplier')),
                ('multiplier_psi2', models.DecimalField(decimal_places=6, max_digits=10, verbose_name='PSI2 multiplier')),
                ('name', models.CharField(max_length=32, verbose_name='name')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'pressure sensor calibration',
                'verbose_name_plural': 'pressure sensor calibrations',
            },
        ),
        migrations.CreateModel(
            name='PressureWeightLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sensor', models.CharField(max_length=32, verbose_name='sensor serial')),
                ('date', models.DateTimeField()),
                ('psi1', models.DecimalField(decimal_places=6, max_digits=20, verbose_name='PSI1')),
                ('psi2', models.DecimalField(decimal_places=6, max_digits=20, verbose_name='PSI2')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'pressure weight log',
                'verbose_name_plural': 'pressure weight logs',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='ProtocolLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('protocol', models.CharField(choices=[('GPRS', 'GPRS'), ('UDP', 'UDP'), ('TCP', 'TCP'), ('HTTP', 'HTTP'), ('OTHER', 'Other')], max_length=10)),
                ('level', models.CharField(choices=[('DEBUG', 'Debug'), ('INFO', 'Info'), ('WARNING', 'Warning'), ('ERROR', 'Error'), ('CRITICAL', 'Critical')], default='INFO', max_length=10)),
                ('message', models.TextField()),
                ('data', models.JSONField(blank=True, null=True)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'protocol log',
                'verbose_name_plural': 'protocol logs',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='ResetEvent',
            fields=[
                ('gpsevent_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='gps.gpsevent')),
                ('reason', models.CharField(max_length=180)),
            ],
            options={
                'verbose_name': 'reset event',
                'verbose_name_plural': 'reset events',
            },
            bases=('gps.gpsevent',),
        ),
        migrations.CreateModel(
            name='ServerSMS',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('command', models.SmallIntegerField(choices=[(1, 'Send SMS'), (2, 'Send Position'), (3, 'Execute Command')], default=0, verbose_name='command')),
                ('direction', models.SmallIntegerField(choices=[(0, 'From Server'), (1, 'From Device')], default=0, verbose_name='direction')),
                ('status', models.SmallIntegerField(choices=[(0, 'Pending'), (1, 'Success'), (2, 'Failed')], default=0, verbose_name='status')),
                ('message', models.CharField(default='New Message', max_length=160, verbose_name='message')),
                ('sent', models.DateTimeField(blank=True, null=True, verbose_name='sent')),
                ('issued', models.DateTimeField(default=skyguard.apps.gps.models.device.nowtz, verbose_name='issued')),
            ],
            options={
                'verbose_name': 'server SMS',
                'verbose_name_plural': 'server SMS commands',
                'ordering': ['-issued'],
            },
        ),
        migrations.CreateModel(
            name='TicketDetail',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='folio')),
                ('date', models.DateTimeField(blank=True, null=True, verbose_name='start date')),
                ('driver_name', models.CharField(max_length=80, verbose_name='driver name')),
                ('total', models.IntegerField(verbose_name='total')),
                ('received', models.IntegerField(verbose_name='received')),
                ('ticket_data', models.TextField(verbose_name='ticket data')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'ticket detail',
                'verbose_name_plural': 'ticket details',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='TicketLog',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='folio')),
                ('data', models.TextField(verbose_name='data')),
                ('route', models.IntegerField(blank=True, choices=[(92, 'Ruta 4'), (112, 'Ruta 6'), (114, 'Ruta 12'), (115, 'Ruta 31'), (90, 'Ruta 82'), (88, 'Ruta 118'), (215, 'Ruta 140'), (89, 'Ruta 202'), (116, 'Ruta 207'), (96, 'Ruta 400'), (97, 'Ruta 408')], null=True, verbose_name='route')),
                ('date', models.DateTimeField(blank=True, null=True, verbose_name='start date')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'ticket log',
                'verbose_name_plural': 'ticket logs',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='TimeSheetCapture',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='folio')),
                ('name', models.CharField(max_length=20, verbose_name='name')),
                ('date', models.DateTimeField(blank=True, null=True, verbose_name='start date')),
                ('driver_name', models.CharField(max_length=80, verbose_name='driver name')),
                ('laps', models.IntegerField(verbose_name='laps')),
                ('times', models.TextField(verbose_name='times')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'timesheet capture',
                'verbose_name_plural': 'timesheet captures',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='Tracking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tracking', models.CharField(max_length=40, unique=True, verbose_name='tracking')),
                ('start', models.DateTimeField(db_index=True)),
                ('stop', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'tracking session',
                'verbose_name_plural': 'tracking sessions',
                'ordering': ['-start'],
            },
        ),
        migrations.CreateModel(
            name='UDPSession',
            fields=[
                ('session', models.AutoField(primary_key=True, serialize=False, verbose_name='session')),
                ('expires', models.DateTimeField(verbose_name='expires')),
                ('host', models.CharField(max_length=128, verbose_name='host')),
                ('port', models.IntegerField(verbose_name='port')),
                ('last_record', models.IntegerField(default=0, verbose_name='last record')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'UDP session',
                'verbose_name_plural': 'UDP sessions',
                'ordering': ['device'],
            },
        ),
        migrations.DeleteModel(
            name='CellTower',
        ),
        migrations.RemoveField(
            model_name='networkmessage',
            name='session',
        ),
        migrations.RemoveField(
            model_name='networksession',
            name='device',
        ),
        migrations.DeleteModel(
            name='WiFiAccessPoint',
        ),
        migrations.AlterModelOptions(
            name='networkevent',
            options={'ordering': ['-timestamp']},
        ),
        migrations.RemoveField(
            model_name='networkevent',
            name='event_type',
        ),
        migrations.RemoveField(
            model_name='networkevent',
            name='ip_address',
        ),
        migrations.RemoveField(
            model_name='networkevent',
            name='port',
        ),
        migrations.RemoveField(
            model_name='networkevent',
            name='protocol',
        ),
        migrations.RemoveField(
            model_name='networkevent',
            name='raw_data',
        ),
        migrations.AddField(
            model_name='geofence',
            name='base',
            field=models.IntegerField(blank=True, choices=[(92, 'Ruta 4'), (112, 'Ruta 6'), (114, 'Ruta 12'), (115, 'Ruta 31'), (90, 'Ruta 82'), (88, 'Ruta 118'), (215, 'Ruta 140'), (89, 'Ruta 202'), (116, 'Ruta 207'), (96, 'Ruta 400'), (97, 'Ruta 408')], null=True),
        ),
        migrations.AddField(
            model_name='gpsdevice',
            name='connection_quality',
            field=models.FloatField(default=0.0, verbose_name='connection quality'),
        ),
        migrations.AddField(
            model_name='gpsdevice',
            name='connection_status',
            field=models.CharField(choices=[('ONLINE', 'Online'), ('OFFLINE', 'Offline'), ('SLEEPING', 'Sleeping'), ('ERROR', 'Error')], default='OFFLINE', max_length=20, verbose_name='connection status'),
        ),
        migrations.AddField(
            model_name='gpsdevice',
            name='current_ip',
            field=models.GenericIPAddressField(blank=True, null=True, verbose_name='current IP'),
        ),
        migrations.AddField(
            model_name='gpsdevice',
            name='current_port',
            field=models.IntegerField(blank=True, null=True, verbose_name='current port'),
        ),
        migrations.AddField(
            model_name='gpsdevice',
            name='economico',
            field=models.IntegerField(blank=True, null=True, verbose_name='economic number'),
        ),
        migrations.AddField(
            model_name='gpsdevice',
            name='error_count',
            field=models.IntegerField(default=0, verbose_name='error count'),
        ),
        migrations.AddField(
            model_name='gpsdevice',
            name='firmware_history',
            field=models.JSONField(default=list, verbose_name='firmware history'),
        ),
        migrations.AddField(
            model_name='gpsdevice',
            name='first_connection',
            field=models.DateTimeField(blank=True, null=True, verbose_name='first connection'),
        ),
        migrations.AddField(
            model_name='gpsdevice',
            name='last_connection',
            field=models.DateTimeField(blank=True, null=True, verbose_name='last connection'),
        ),
        migrations.AddField(
            model_name='gpsdevice',
            name='last_error',
            field=models.TextField(blank=True, null=True, verbose_name='last error'),
        ),
        migrations.AddField(
            model_name='gpsdevice',
            name='last_heartbeat',
            field=models.DateTimeField(blank=True, null=True, verbose_name='last heartbeat'),
        ),
        migrations.AddField(
            model_name='gpsdevice',
            name='new_input_flags',
            field=models.CharField(blank=True, max_length=32, verbose_name='new inputs'),
        ),
        migrations.AddField(
            model_name='gpsdevice',
            name='new_outputs',
            field=models.IntegerField(blank=True, null=True, verbose_name='new outputs'),
        ),
        migrations.AddField(
            model_name='gpsdevice',
            name='route',
            field=models.IntegerField(blank=True, choices=[(92, 'Ruta 4'), (112, 'Ruta 6'), (114, 'Ruta 12'), (115, 'Ruta 31'), (90, 'Ruta 82'), (88, 'Ruta 118'), (215, 'Ruta 140'), (89, 'Ruta 202'), (116, 'Ruta 207'), (96, 'Ruta 400'), (97, 'Ruta 408')], null=True, verbose_name='route'),
        ),
        migrations.AddField(
            model_name='gpsdevice',
            name='total_connections',
            field=models.IntegerField(default=0, verbose_name='total connections'),
        ),
        migrations.AddField(
            model_name='networkevent',
            name='altitude',
            field=models.FloatField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='networkevent',
            name='course',
            field=models.FloatField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='networkevent',
            name='data',
            field=models.JSONField(default=dict),
        ),
        migrations.AddField(
            model_name='networkevent',
            name='odometer',
            field=models.FloatField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='networkevent',
            name='position',
            field=django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326),
        ),
        migrations.AddField(
            model_name='networkevent',
            name='speed',
            field=models.FloatField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='networkevent',
            name='type',
            field=models.CharField(choices=[('CONNECT', 'Device Connected'), ('DISCONNECT', 'Device Disconnected'), ('LOGIN', 'Device Login'), ('LOGOUT', 'Device Logout'), ('ALARM', 'Device Alarm'), ('TRACK', 'Location Track'), ('STATUS', 'Status Update'), ('CONFIG', 'Configuration Update'), ('OTHER', 'Other Event')], default='OTHER', max_length=20),
        ),
        migrations.AddField(
            model_name='networkevent',
            name='updated_at',
            field=models.DateTimeField(auto_now=True),
        ),
        migrations.AlterField(
            model_name='gpsevent',
            name='device',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='gps_events', to='gps.gpsdevice'),
        ),
        migrations.AlterField(
            model_name='gpslocation',
            name='device',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='gps_locations', to='gps.gpsdevice'),
        ),
        migrations.AlterField(
            model_name='networkevent',
            name='device',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='gps.gpsdevice'),
        ),
        migrations.AlterField(
            model_name='networkevent',
            name='timestamp',
            field=models.DateTimeField(default=django.utils.timezone.now),
        ),
        migrations.AlterUniqueTogether(
            name='gpsdevice',
            unique_together={('name', 'owner')},
        ),
        migrations.AddIndex(
            model_name='networkevent',
            index=models.Index(fields=['device', 'timestamp'], name='gps_network_device__395aea_idx'),
        ),
        migrations.AddIndex(
            model_name='networkevent',
            index=models.Index(fields=['type'], name='gps_network_type_bc7c48_idx'),
        ),
        migrations.AddIndex(
            model_name='networkevent',
            index=models.Index(fields=['timestamp'], name='gps_network_timesta_07965d_idx'),
        ),
        migrations.AddField(
            model_name='accelerationlog',
            name='device',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='acceleration_logs', to='gps.gpsdevice'),
        ),
        migrations.AddField(
            model_name='alarmlog',
            name='device',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alarm_logs', to='gps.gpsdevice'),
        ),
        migrations.AddField(
            model_name='carlane',
            name='park',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lanes', to='gps.carpark'),
        ),
        migrations.AddField(
            model_name='carslot',
            name='lane',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='slots', to='gps.carlane'),
        ),
        migrations.AddField(
            model_name='gpsdevice',
            name='harness',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='gps.deviceharness'),
        ),
        migrations.AddIndex(
            model_name='gpsdevice',
            index=models.Index(fields=['connection_status'], name='gps_gpsdevi_connect_1e94bb_idx'),
        ),
        migrations.AddIndex(
            model_name='gpsdevice',
            index=models.Index(fields=['last_connection'], name='gps_gpsdevi_last_co_2baf55_idx'),
        ),
        migrations.AddIndex(
            model_name='gpsdevice',
            index=models.Index(fields=['route'], name='gps_gpsdevi_route_9db4a4_idx'),
        ),
        migrations.AddIndex(
            model_name='gpsdevice',
            index=models.Index(fields=['economico'], name='gps_gpsdevi_economi_83caee_idx'),
        ),
        migrations.AddField(
            model_name='devicesession',
            name='device',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='gps.gpsdevice'),
        ),
        migrations.AddField(
            model_name='gprsrecord',
            name='packet',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='records', to='gps.gprspacket'),
        ),
        migrations.AddField(
            model_name='gprssession',
            name='device',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='gprs_sessions', to='gps.gpsdevice'),
        ),
        migrations.AddField(
            model_name='gprspacket',
            name='session',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='packets', to='gps.gprssession'),
        ),
        migrations.AddField(
            model_name='location',
            name='device',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='locations', to='gps.gpsdevice'),
        ),
        migrations.AddField(
            model_name='overlay',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='pressuresensorcalibration',
            name='device',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pressure_calibrations', to='gps.gpsdevice'),
        ),
        migrations.AddField(
            model_name='pressureweightlog',
            name='device',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pressure_logs', to='gps.gpsdevice'),
        ),
        migrations.AddField(
            model_name='protocollog',
            name='device',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='protocol_logs', to='gps.gpsdevice'),
        ),
        migrations.AddField(
            model_name='serversms',
            name='device',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sms_commands', to='gps.gpsdevice'),
        ),
        migrations.AddField(
            model_name='ticketdetail',
            name='device',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ticket_details', to='gps.gpsdevice'),
        ),
        migrations.AddField(
            model_name='tracking',
            name='device',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tracking_sessions', to='gps.gpsdevice'),
        ),
        migrations.AddField(
            model_name='tracking',
            name='fences',
            field=models.ManyToManyField(related_name='tracking_events', to='gps.geofence'),
        ),
        migrations.AddField(
            model_name='tracking',
            name='stop_fence',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stop_sessions', to='gps.geofence'),
        ),
        migrations.AddField(
            model_name='udpsession',
            name='device',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='udp_session', to='gps.gpsdevice'),
        ),
        migrations.DeleteModel(
            name='NetworkMessage',
        ),
        migrations.DeleteModel(
            name='NetworkSession',
        ),
        migrations.AlterUniqueTogether(
            name='carslot',
            unique_together={('lane', 'number')},
        ),
        migrations.AddIndex(
            model_name='devicesession',
            index=models.Index(fields=['device', 'start_time'], name='gps_devices_device__88504a_idx'),
        ),
        migrations.AddIndex(
            model_name='devicesession',
            index=models.Index(fields=['is_active'], name='gps_devices_is_acti_3eb585_idx'),
        ),
        migrations.AddIndex(
            model_name='devicesession',
            index=models.Index(fields=['last_activity'], name='gps_devices_last_ac_6b18ee_idx'),
        ),
        migrations.AddIndex(
            model_name='location',
            index=models.Index(fields=['device', 'timestamp'], name='gps_locatio_device__4aa118_idx'),
        ),
        migrations.AddIndex(
            model_name='location',
            index=models.Index(fields=['timestamp'], name='gps_locatio_timesta_5d3571_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='pressuresensorcalibration',
            unique_together={('device', 'sensor')},
        ),
        migrations.AddIndex(
            model_name='pressureweightlog',
            index=models.Index(fields=['device', 'date'], name='gps_pressur_device__8aa85b_idx'),
        ),
        migrations.AddIndex(
            model_name='pressureweightlog',
            index=models.Index(fields=['sensor'], name='gps_pressur_sensor_460c80_idx'),
        ),
        migrations.AddIndex(
            model_name='protocollog',
            index=models.Index(fields=['device', 'protocol'], name='gps_protoco_device__6fd5fd_idx'),
        ),
        migrations.AddIndex(
            model_name='protocollog',
            index=models.Index(fields=['level'], name='gps_protoco_level_ea2d5c_idx'),
        ),
        migrations.AddIndex(
            model_name='protocollog',
            index=models.Index(fields=['timestamp'], name='gps_protoco_timesta_657733_idx'),
        ),
    ]
