# Generated by Django 5.2.3 on 2025-06-13 20:44

import django.contrib.gis.db.models.fields
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('gps', '0005_alter_gpsevent_raw_data'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='SimCard',
            fields=[
                ('iccid', models.BigIntegerField(primary_key=True, serialize=False)),
                ('imsi', models.BigIntegerField(null=True)),
                ('provider', models.SmallIntegerField(choices=[(0, 'Telcel'), (1, 'Movistar'), (2, 'IusaCell')], default=0)),
                ('phone', models.CharField(max_length=16)),
            ],
        ),
        migrations.AlterModelOptions(
            name='gpsdevice',
            options={'verbose_name': 'GPS device', 'verbose_name_plural': 'GPS devices'},
        ),
        migrations.AlterModelOptions(
            name='gpsevent',
            options={'verbose_name': 'GPS event', 'verbose_name_plural': 'GPS events'},
        ),
        migrations.AlterModelOptions(
            name='gpslocation',
            options={'verbose_name': 'GPS location', 'verbose_name_plural': 'GPS locations'},
        ),
        migrations.RemoveField(
            model_name='gpsdevice',
            name='battery_level',
        ),
        migrations.RemoveField(
            model_name='gpsdevice',
            name='firmware_version',
        ),
        migrations.RemoveField(
            model_name='gpsdevice',
            name='id',
        ),
        migrations.RemoveField(
            model_name='gpsdevice',
            name='is_active',
        ),
        migrations.RemoveField(
            model_name='gpsdevice',
            name='last_maintenance',
        ),
        migrations.RemoveField(
            model_name='gpsdevice',
            name='maintenance_interval',
        ),
        migrations.RemoveField(
            model_name='gpsdevice',
            name='protocol',
        ),
        migrations.RemoveField(
            model_name='gpsdevice',
            name='signal_strength',
        ),
        migrations.AddField(
            model_name='gpsdevice',
            name='alarm_mask',
            field=models.IntegerField(default=321, verbose_name='alarm mask'),
        ),
        migrations.AddField(
            model_name='gpsdevice',
            name='alarms',
            field=models.IntegerField(default=0, verbose_name='alarms'),
        ),
        migrations.AddField(
            model_name='gpsdevice',
            name='comments',
            field=models.TextField(blank=True, null=True, verbose_name='Comments'),
        ),
        migrations.AddField(
            model_name='gpsdevice',
            name='firmware_file',
            field=models.CharField(blank=True, max_length=16, verbose_name='firmware file'),
        ),
        migrations.AddField(
            model_name='gpsdevice',
            name='icon',
            field=models.CharField(default='default.png', max_length=64, verbose_name='icon'),
        ),
        migrations.AddField(
            model_name='gpsdevice',
            name='inputs',
            field=models.IntegerField(default=0, verbose_name='inputs'),
        ),
        migrations.AddField(
            model_name='gpsdevice',
            name='last_firmware_update',
            field=models.DateTimeField(blank=True, null=True, verbose_name='last firmware update'),
        ),
        migrations.AddField(
            model_name='gpsdevice',
            name='model',
            field=models.SmallIntegerField(choices=[(0, 'Unknown'), (1, 'SGB4612'), (2, 'SGP4612')], default=0, verbose_name='model'),
        ),
        migrations.AddField(
            model_name='gpsdevice',
            name='outputs',
            field=models.IntegerField(default=0, verbose_name='outputs'),
        ),
        migrations.AddField(
            model_name='gpsdevice',
            name='owner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='gpsdevice',
            name='serial',
            field=models.IntegerField(default=0, verbose_name='serial'),
        ),
        migrations.AddField(
            model_name='gpsdevice',
            name='software_version',
            field=models.CharField(default='----', max_length=4, verbose_name='version'),
        ),
        migrations.AddField(
            model_name='gpsevent',
            name='alarm_changes',
            field=models.IntegerField(default=0),
        ),
        migrations.AddField(
            model_name='gpsevent',
            name='changes_description',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='gpsevent',
            name='input_changes',
            field=models.IntegerField(default=0),
        ),
        migrations.AddField(
            model_name='gpsevent',
            name='inputs',
            field=models.IntegerField(default=0),
        ),
        migrations.AddField(
            model_name='gpsevent',
            name='output_changes',
            field=models.IntegerField(default=0),
        ),
        migrations.AddField(
            model_name='gpsevent',
            name='outputs',
            field=models.IntegerField(default=0),
        ),
        migrations.AddField(
            model_name='gpsevent',
            name='source',
            field=models.CharField(blank=True, max_length=20, null=True),
        ),
        migrations.AddField(
            model_name='gpsevent',
            name='text',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='gpsdevice',
            name='altitude',
            field=models.FloatField(default=0, verbose_name='altitude'),
        ),
        migrations.AlterField(
            model_name='gpsdevice',
            name='course',
            field=models.FloatField(default=0, verbose_name='course'),
        ),
        migrations.AlterField(
            model_name='gpsdevice',
            name='imei',
            field=models.BigIntegerField(primary_key=True, serialize=False, verbose_name='imei'),
        ),
        migrations.AlterField(
            model_name='gpsdevice',
            name='last_log',
            field=models.DateTimeField(blank=True, null=True, verbose_name='last update'),
        ),
        migrations.AlterField(
            model_name='gpsdevice',
            name='name',
            field=models.CharField(max_length=50, verbose_name='name'),
        ),
        migrations.AlterField(
            model_name='gpsdevice',
            name='odometer',
            field=models.FloatField(default=0, verbose_name='odometer'),
        ),
        migrations.AlterField(
            model_name='gpsdevice',
            name='position',
            field=django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326, verbose_name='position'),
        ),
        migrations.AlterField(
            model_name='gpsdevice',
            name='speed',
            field=models.FloatField(default=0, verbose_name='speed'),
        ),
        migrations.AlterField(
            model_name='gpsevent',
            name='altitude',
            field=models.FloatField(default=0),
        ),
        migrations.AlterField(
            model_name='gpsevent',
            name='course',
            field=models.FloatField(default=0),
        ),
        migrations.AlterField(
            model_name='gpsevent',
            name='odometer',
            field=models.FloatField(default=0),
        ),
        migrations.AlterField(
            model_name='gpsevent',
            name='raw_data',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.RunSQL(
            sql="""
            UPDATE gps_gpsevent 
            SET raw_data = CASE 
                WHEN raw_data IS NULL THEN NULL 
                ELSE raw_data::jsonb::text 
            END
            WHERE raw_data IS NOT NULL;
            """,
            reverse_sql="""
            UPDATE gps_gpsevent 
            SET raw_data = CASE 
                WHEN raw_data IS NULL THEN NULL 
                ELSE raw_data::text 
            END
            WHERE raw_data IS NOT NULL;
            """
        ),
        migrations.AlterField(
            model_name='gpsevent',
            name='raw_data',
            field=models.JSONField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='gpsevent',
            name='speed',
            field=models.FloatField(default=0),
        ),
        migrations.AlterField(
            model_name='gpsevent',
            name='type',
            field=models.CharField(max_length=50),
        ),
        migrations.CreateModel(
            name='GeoFence',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='name')),
                ('geometry', django.contrib.gis.db.models.fields.PolygonField(srid=4326, verbose_name='polygon')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('notify_on_entry', models.BooleanField(default=True)),
                ('notify_on_exit', models.BooleanField(default=True)),
                ('notify_owners', models.ManyToManyField(blank=True, related_name='notified_fences', to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'geofence',
                'verbose_name_plural': 'geofences',
            },
        ),
        migrations.CreateModel(
            name='GeoFenceEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(choices=[('ENTRY', 'Entry'), ('EXIT', 'Exit')], max_length=5)),
                ('position', django.contrib.gis.db.models.fields.PointField(srid=4326)),
                ('timestamp', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fence_events', to='gps.gpsdevice')),
                ('fence', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='gps.geofence')),
            ],
            options={
                'verbose_name': 'geofence event',
                'verbose_name_plural': 'geofence events',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='NetworkEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(choices=[('CONNECT', 'Connection'), ('DISCONNECT', 'Disconnection'), ('TIMEOUT', 'Timeout'), ('ERROR', 'Error')], max_length=10)),
                ('timestamp', models.DateTimeField()),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('port', models.IntegerField(blank=True, null=True)),
                ('protocol', models.CharField(max_length=20)),
                ('raw_data', models.JSONField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='network_events', to='gps.gpsdevice')),
            ],
            options={
                'verbose_name': 'network event',
                'verbose_name_plural': 'network events',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='NetworkSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('ip_address', models.GenericIPAddressField()),
                ('port', models.IntegerField()),
                ('protocol', models.CharField(max_length=20)),
                ('bytes_sent', models.BigIntegerField(default=0)),
                ('bytes_received', models.BigIntegerField(default=0)),
                ('packets_sent', models.IntegerField(default=0)),
                ('packets_received', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='gps.gpsdevice')),
            ],
            options={
                'verbose_name': 'network session',
                'verbose_name_plural': 'network sessions',
                'ordering': ['-start_time'],
            },
        ),
        migrations.CreateModel(
            name='NetworkMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message_type', models.CharField(choices=[('COMMAND', 'Command'), ('RESPONSE', 'Response'), ('ALERT', 'Alert'), ('DATA', 'Data')], max_length=10)),
                ('timestamp', models.DateTimeField()),
                ('direction', models.CharField(choices=[('IN', 'Incoming'), ('OUT', 'Outgoing')], max_length=10)),
                ('raw_data', models.JSONField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='gps.networksession')),
            ],
            options={
                'verbose_name': 'network message',
                'verbose_name_plural': 'network messages',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.AddField(
            model_name='gpsdevice',
            name='sim_card',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='device', to='gps.simcard'),
        ),
    ]
